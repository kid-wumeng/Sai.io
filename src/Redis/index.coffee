_        = require('lodash')
bluebird = require('bluebird')
redis    = require('redis')



module.exports = class Redis

  constructor: (options={}) ->
    @host = options.host ? '0.0.0.0'
    @port = options.port ? 6379
    @user = options.user
    @pass = options.pass
    @cli  = null

    # callback >> Promise
    bluebird.promisifyAll(redis.RedisClient.prototype)
    bluebird.promisifyAll(redis.Multi.prototype)



  ### @Public ###
  # 连接数据库
  ##
  connect: =>
    @cli = redis.createClient({
      host: @host
      port: @port
    })
    @mountCommands()



  ### @Public ###
  # 关闭数据库链接
  ##
  close: =>
    @cli.end(true)



  mountCommands: =>
    @mountCommand('APPEND')
    @mountCommand('ASKING')
    @mountCommand('AUTH')
    @mountCommand('BATCH')
    @mountCommand('BGREWRITEAOF')
    @mountCommand('BGSAVE')
    @mountCommand('BITCOUNT')
    @mountCommand('BITFIELD')
    @mountCommand('BITOP')
    @mountCommand('BITPOS')
    @mountCommand('BLPOP')
    @mountCommand('BRPOP')
    @mountCommand('BRPOPLPUSH')
    @mountCommand('CLIENT')
    @mountCommand('CLUSTER')
    @mountCommand('COMMAND')
    @mountCommand('CONFIG')
    @mountCommand('DBSIZE')
    @mountCommand('DEBUG')
    @mountCommand('DECR')
    @mountCommand('DECRBY')
    @mountCommand('DEL')
    @mountCommand('DISCARD')
    @mountCommand('DUMP')
    @mountCommand('ECHO')
    @mountCommand('EVAL')
    @mountCommand('EVALSHA')
    @mountCommand('EXEC')
    @mountCommand('EXISTS')
    @mountCommand('EXPIRE')
    @mountCommand('EXPIREAT')
    @mountCommand('FLUSHALL')
    @mountCommand('FLUSHDB')
    @mountCommand('GEOADD')
    @mountCommand('GEODIST')
    @mountCommand('GEOHASH')
    @mountCommand('GEOPOS')
    @mountCommand('GEORADIUS')
    @mountCommand('GEORADIUSBYMEMBER')
    @mountCommand('GET')
    @mountCommand('GETBIT')
    @mountCommand('GETRANGE')
    @mountCommand('GETSET')
    @mountCommand('HDEL')
    @mountCommand('HEXISTS')
    @mountCommand('HGET')
    @mountCommand('HGETALL')
    @mountCommand('HINCRBY')
    @mountCommand('HINCRBYFLOAT')
    @mountCommand('HKEYS')
    @mountCommand('HLEN')
    @mountCommand('HMGET')
    @mountCommand('HMSET')
    @mountCommand('HOST_')
    @mountCommand('HSCAN')
    @mountCommand('HSET')
    @mountCommand('HSETNX')
    @mountCommand('HSTRLEN')
    @mountCommand('HVALS')
    @mountCommand('INCR')
    @mountCommand('INCRBY')
    @mountCommand('INCRBYFLOAT')
    @mountCommand('INFO')
    @mountCommand('KEYS')
    @mountCommand('LASTSAVE')
    @mountCommand('LATENCY')
    @mountCommand('LINDEX')
    @mountCommand('LINSERT')
    @mountCommand('LLEN')
    @mountCommand('LPOP')
    @mountCommand('LPUSH')
    @mountCommand('LPUSHX')
    @mountCommand('LRANGE')
    @mountCommand('LREM')
    @mountCommand('LSET')
    @mountCommand('LTRIM')
    @mountCommand('MEMORY')
    @mountCommand('MGET')
    @mountCommand('MIGRATE')
    @mountCommand('MODULE')
    @mountCommand('MONITOR')
    @mountCommand('MOVE')
    @mountCommand('MSET')
    @mountCommand('MSETNX')
    @mountCommand('MULTI')
    @mountCommand('OBJECT')
    @mountCommand('PERSIST')
    @mountCommand('PEXPIRE')
    @mountCommand('PEXPIREAT')
    @mountCommand('PFADD')
    @mountCommand('PFCOUNT')
    @mountCommand('PFDEBUG')
    @mountCommand('PFMERGE')
    @mountCommand('PFSELFTEST')
    @mountCommand('PING')
    @mountCommand('POST')
    @mountCommand('PSETEX')
    @mountCommand('PSUBSCRIBE')
    @mountCommand('PSYNC')
    @mountCommand('PTTL')
    @mountCommand('PUBLISH')
    @mountCommand('PUBSUB')
    @mountCommand('PUNSUBSCRIBE')
    @mountCommand('QUIT')
    @mountCommand('RANDOMKEY')
    @mountCommand('READONLY')
    @mountCommand('READWRITE')
    @mountCommand('RENAME')
    @mountCommand('RENAMENX')
    @mountCommand('REPLCONF')
    @mountCommand('RESTORE')
    @mountCommand('RESTORE_ASKING')
    @mountCommand('ROLE')
    @mountCommand('RPOP')
    @mountCommand('RPOPLPUSH')
    @mountCommand('RPUSH')
    @mountCommand('RPUSHX')
    @mountCommand('SADD')
    @mountCommand('SAVE')
    @mountCommand('SCAN')
    @mountCommand('SCARD')
    @mountCommand('SCRIPT')
    @mountCommand('SDIFF')
    @mountCommand('SDIFFSTORE')
    @mountCommand('SELECT')
    @mountCommand('SET')
    @mountCommand('SETBIT')
    @mountCommand('SETEX')
    @mountCommand('SETNX')
    @mountCommand('SETRANGE')
    @mountCommand('SHUTDOWN')
    @mountCommand('SINTER')
    @mountCommand('SINTERSTORE')
    @mountCommand('SISMEMBER')
    @mountCommand('SLAVEOF')
    @mountCommand('SLOWLOG')
    @mountCommand('SMEMBERS')
    @mountCommand('SMOVE')
    @mountCommand('SORT')
    @mountCommand('SPOP')
    @mountCommand('SRANDMEMBER')
    @mountCommand('SREM')
    @mountCommand('SSCAN')
    @mountCommand('STRLEN')
    @mountCommand('SUBSCRIBE')
    @mountCommand('SUBSTR')
    @mountCommand('SUNION')
    @mountCommand('SUNIONSTORE')
    @mountCommand('SWAPDB')
    @mountCommand('SYNC')
    @mountCommand('TIME')
    @mountCommand('TOUCH')
    @mountCommand('TTL')
    @mountCommand('TYPE')
    @mountCommand('UNLINK')
    @mountCommand('UNSUBSCRIBE')
    @mountCommand('UNWATCH')
    @mountCommand('WAIT')
    @mountCommand('WATCH')
    @mountCommand('ZADD')
    @mountCommand('ZCARD')
    @mountCommand('ZCOUNT')
    @mountCommand('ZINCRBY')
    @mountCommand('ZINTERSTORE')
    @mountCommand('ZLEXCOUNT')
    @mountCommand('ZRANGE')
    @mountCommand('ZRANGEBYLEX')
    @mountCommand('ZRANGEBYSCORE')
    @mountCommand('ZRANK')
    @mountCommand('ZREM')
    @mountCommand('ZREMRANGEBYLEX')
    @mountCommand('ZREMRANGEBYRANK')
    @mountCommand('ZREMRANGEBYSCORE')
    @mountCommand('ZREVRANGE')
    @mountCommand('ZREVRANGEBYLEX')
    @mountCommand('ZREVRANGEBYSCORE')
    @mountCommand('ZREVRANK')
    @mountCommand('ZSCAN')
    @mountCommand('ZSCORE')
    @mountCommand('ZUNIONSTORE')



  mountCommand: (command) =>
    @mountCommandMethod(command)
    @mountCommandMethod(command.toLowerCase())



  mountCommandMethod: (command) =>
    commandAsync = @cli["#{command}Async"]
    if _.isFunction(commandAsync)
      @[command] = commandAsync.bind(@cli)